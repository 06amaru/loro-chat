package db_test

import (
	"context"
	"server/db"
	"server/db/utils"
	su "server/utils"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
)

func TestExecute(t *testing.T) {
	ctx, cancel := context.WithTimeout(context.Background(), 120*time.Second)
	defer cancel()

	pool, err := db.NewPostgresRepository()
	require.NoError(t, err)
	defer pool.Close()

	_, err = pool.Execute(ctx, `drop table if exists user_test`)
	require.NoError(t, err)

	_, err = pool.Execute(ctx, `create table user_test(
		id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
		username varchar NOT NULL,
		created_at timestamptz NOT NULL,
		password varchar NOT NULL,
		private_key bytea NOT NULL,
		public_key bytea NOT NULL,
		CONSTRAINT test_pkey PRIMARY KEY (id))`)
	require.NoError(t, err)
	defer pool.Execute(ctx, `drop table user_test`)

	_, err = pool.Execute(ctx, `insert into user_test(
		username, created_at, password, private_key, public_key) values ($1,$2,$3,$4,$5)`,
		"noname",
		time.Now(),
		su.CreateHash("nopassword"),
		su.GenerateKey(),
		su.GenerateKey())
	require.NoError(t, err)

	user := utils.User{}
	err = pool.QueryRow(ctx, `select id, username, password from user_test where username = $1`, "noname").
		Scan(&user.ID, &user.Username, &user.Password)
	require.NoError(t, err)
}
